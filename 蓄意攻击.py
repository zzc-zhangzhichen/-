import random

import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def read_road(file):
    with open(file, "r") as f:  # 打开文件
         data = f.read()  # 读取文件
         net = []
         data = data.replace(" ", "")
         data = data.replace("(", "")
         data = data.replace(")", "")
         data = data.replace("\n", "")
         data = data.split(",")

         for i, d in enumerate(data):
             if i % 2 == 0:
                 net.append((int(data[i]), int(data[i + 1])))
    print("路网为：" + str(net))
    return net

def create(n):
    G = nx.Graph()
    #G = nx.random_tree(36)
    G.add_edges_from(
        [(2, 1), (5, 4), (8, 7), (11, 10), (14, 13), (17, 16), (20, 19), (23, 22), (26, 25), (29, 28), (32, 31),
         (35, 34), (38, 37),
         (41, 40), (44, 43), (47, 46), (50, 49), (53, 52), (56, 55), (59, 58), (62, 61), (65, 64), (68, 67), (71, 70),
         (74, 73), (77, 76), (80, 79), (83, 82), (86, 85), (89, 88), (92, 91), (95, 94), (98, 97), (101, 100),
         (104, 103),
         (107, 106), (110, 109), (113, 112), (116, 115), (119, 118), (122, 121), (125, 124), (128, 127), (131, 130),
         (134, 133), (137, 136), (140, 139), (143, 142), (146, 145), (149, 148), (152, 151), (155, 154), (158, 157),
         (161, 160), (164, 163), (167, 166), (170, 169), (173, 172), (176, 175), (179, 178), (182, 181), (185, 184),
         (188, 187), (191, 190), (194, 193), (197, 196), (200, 199), (203, 202), (206, 205), (209, 208), (212, 211),
         (215, 214), (218, 217), (221, 220), (224, 223), (227, 226), (230, 229), (233, 232), (236, 235), (239, 238),
         (242, 241), (245, 244), (248, 247), (251, 250), (254, 253), (257, 256), (260, 259), (263, 262), (266, 265),
         (269, 268), (272, 271), (275, 274), (278, 277), (281, 280), (284, 283), (287, 286), (290, 289), (293, 292),
         (296, 295), (299, 298), (302, 301), (305, 304), (308, 307), (311, 310), (314, 313), (317, 316), (320, 319),
         (323, 322), (326, 325), (329, 328), (332, 331), (335, 334), (338, 337), (341, 340), (344, 343), (347, 346),
         (350, 349), (353, 352), (356, 355), (359, 358), (362, 361), (365, 364), (368, 367), (371, 370), (374, 373),
         (377, 376), (380, 379), (383, 382), (386, 385), (389, 388), (392, 391), (395, 394), (398, 397), (401, 400),
         (2, 3),
         (5, 6), (8, 9), (11, 12), (14, 15), (17, 18), (20, 21), (23, 24), (26, 27), (29, 30), (32, 33), (35, 36),
         (38, 39),
         (41, 42), (44, 45), (47, 48), (50, 51), (53, 54), (56, 57), (59, 60), (62, 63), (65, 66), (68, 69), (71, 72),
         (74, 75), (77, 78), (80, 81), (83, 84), (86, 87), (89, 90), (92, 93), (95, 96), (98, 99), (101, 102),
         (104, 105),
         (107, 108), (110, 111), (113, 114), (116, 117), (119, 120), (122, 123), (125, 126), (128, 129), (131, 132),
         (134, 135), (137, 138), (140, 141), (143, 144), (146, 147), (149, 150), (152, 153), (155, 156), (158, 159),
         (161, 162), (164, 165), (167, 168), (170, 171), (173, 174), (176, 177), (179, 180), (182, 183), (185, 186),
         (188, 189), (191, 192), (194, 195), (197, 198), (200, 201), (203, 204), (206, 207), (209, 210), (212, 213),
         (215, 216), (218, 219), (221, 222), (224, 225), (227, 228), (230, 231), (233, 234), (236, 237), (239, 240),
         (242, 243), (245, 246), (248, 249), (251, 252), (254, 255), (257, 258), (260, 261), (263, 264), (266, 267),
         (269, 270), (272, 273), (275, 276), (278, 279), (281, 282), (284, 285), (287, 288), (290, 291), (293, 294),
         (296, 297), (299, 300), (302, 303), (305, 306), (308, 309), (311, 312), (314, 315), (317, 318), (320, 321),
         (323, 324), (326, 327), (329, 330), (332, 333), (335, 336), (338, 339), (341, 342), (344, 345), (347, 348),
         (350, 351), (353, 354), (356, 357), (359, 360), (362, 363), (365, 366), (368, 369), (371, 372), (374, 375),
         (377, 378), (380, 381), (383, 384), (386, 387), (389, 390), (392, 393), (395, 396), (398, 399), (401, 402),
         (2, 5),
         (5, 8), (8, 11), (11, 14), (14, 17), (17, 20), (20, 23), (23, 26), (26, 29), (32, 35), (35, 38),
         (38, 41), (41, 44), (44, 47), (47, 50), (50, 53), (53, 56), (56, 59), (62, 65), (65, 68), (68, 71),
         (71, 74), (74, 77), (77, 80), (80, 83), (83, 86), (86, 89), (92, 95), (95, 98), (98, 101), (101, 104),
         (104, 107), (107, 110), (110, 113), (113, 116), (116, 119), (122, 125), (125, 128), (128, 131),
         (131, 134), (134, 137), (137, 140), (140, 143), (143, 146), (146, 149), (152, 155), (155, 158),
         (158, 161), (161, 164), (164, 167), (167, 170), (170, 173), (173, 176), (176, 179), (182, 185),
         (185, 188), (188, 191), (191, 194), (194, 197), (197, 200), (200, 203), (203, 206), (206, 209),
         (212, 215), (215, 218), (218, 221), (221, 224), (224, 227), (227, 230), (230, 233), (233, 236), (236, 239),
         (242, 245), (245, 248), (248, 251), (251, 254), (254, 257), (257, 260), (260, 263), (263, 266),
         (266, 269), (272, 275), (275, 278), (278, 281), (281, 284), (284, 287), (287, 290), (290, 293),
         (293, 296), (296, 299), (302, 305), (305, 308), (308, 311), (311, 314), (314, 317), (317, 320),
         (320, 323), (323, 326), (326, 329), (332, 335), (335, 338), (338, 341), (341, 344), (344, 347),
         (347, 350), (350, 353), (353, 356), (356, 359), (362, 365), (365, 368), (368, 371), (371, 374),
         (374, 377), (377, 380), (380, 383), (383, 386), (386, 389), (392, 395), (395, 398), (398, 401),
         (401, 404), (405, 29), (405, 32), (406, 89), (406, 92), (407, 149), (407, 152), (408, 209), (408, 212),
         (409, 269),(409, 272), (410, 329), (410, 332), (411, 389), (411, 392),
         (405, 406), (406, 407), (407, 408), (408, 409), (409, 410), (410, 411)])


    '''G.add_edges_from(
        [(1, 2), (2, 3), (1, 4), (4, 5), (4, 6), (4, 7), (7, 8), (7, 9), (7, 10), (2, 11), (11, 12), (11, 13), (11, 14),
         (14, 15), (14, 16), (14, 17), (3, 18), (18, 19), (18, 20), (18, 21), (21, 22), (21, 23), (21, 24),
         (1, 25), (25, 26), (25, 27), (25, 28), (28, 29), (28, 30), (28, 31), (2, 32), (32, 33), (32, 34), (32, 35)
            , (35, 36), (35, 37), (35, 38), (3, 39), (39, 40), (39, 41), (39, 42), (42, 43), (42, 44), (42, 45)])'''
    #G = nx.grid_2d_graph(20, 20)
    #G.add_edges_from([(1, 2),(2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 1), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 11), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 21), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 31), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 41), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 51), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 61), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79), (79, 80), (80, 71), (81, 82), (82, 83), (83, 84), (84, 85), (85, 86), (86, 87), (87, 88), (88, 89), (89, 90), (90, 81), (91, 92), (92, 93), (93, 94), (94, 95), (95, 96), (96, 97), (97, 98), (98, 99), (99, 100), (100, 91), (101, 102), (102, 103), (103, 104), (104, 105), (105, 106), (106, 107), (107, 108), (108, 109), (109, 110), (110, 101), (111, 112), (112, 113), (113, 114), (114, 115), (115, 116), (116, 117), (117, 118), (118, 119), (119, 120), (120, 111), (121, 122), (122, 123), (123, 124), (124, 125), (125, 126), (126, 127), (127, 128), (128, 129), (129, 130), (130, 121), (131, 132), (132, 133), (133, 134), (134, 135), (135, 136), (136, 137), (137, 138), (138, 139), (139, 140), (140, 131), (141, 142), (142, 143), (143, 144), (144, 145), (145, 146), (146, 147), (147, 148), (148, 149), (149, 150), (150, 141), (151, 152), (152, 153), (153, 154), (154, 155), (155, 156), (156, 157), (157, 158), (158, 159), (159, 160), (160, 151), (161, 162), (162, 163), (163, 164), (164, 165), (165, 166), (166, 167), (167, 168), (168, 169), (169, 170), (170, 161), (171, 172), (172, 173), (173, 174), (174, 175), (175, 176), (176, 177), (177, 178), (178, 179), (179, 180), (180, 171), (181, 182), (182, 183), (183, 184), (184, 185), (185, 186), (186, 187), (187, 188), (188, 189), (189, 190), (190, 181), (191, 192), (192, 193), (193, 194), (194, 195), (195, 196), (196, 197), (197, 198), (198, 199), (199, 200), (200, 191), (201, 202), (202, 203), (203, 204), (204, 205), (205, 206), (206, 207), (207, 208), (208, 209), (209, 210), (210, 201), (211, 212), (212, 213), (213, 214), (214, 215), (215, 216), (216, 217), (217, 218), (218, 219), (219, 220), (220, 211), (221, 222), (222, 223), (223, 224), (224, 225), (225, 226), (226, 227), (227, 228), (228, 229), (229, 230), (230, 221), (231, 232), (232, 233), (233, 234), (234, 235), (235, 236), (236, 237), (237, 238), (238, 239), (239, 240), (240, 231), (241, 242), (242, 243), (243, 244), (244, 245), (245, 246), (246, 247), (247, 248), (248, 249), (249, 250), (250, 241), (251, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 257), (257, 258), (258, 259), (259, 260), (260, 251), (261, 262), (262, 263), (263, 264), (264, 265), (265, 266), (266, 267), (267, 268), (268, 269), (269, 270), (270, 261), (271, 272), (272, 273), (273, 274), (274, 275), (275, 276), (276, 277), (277, 278), (278, 279), (279, 280), (280, 271), (281, 282), (282, 283), (283, 284), (284, 285), (285, 286), (286, 287), (287, 288), (288, 289), (289, 290), (290, 281), (291, 292), (292, 293), (293, 294), (294, 295), (295, 296), (296, 297), (297, 298), (298, 299), (299, 300), (300, 291), (301, 302), (302, 303), (303, 304), (304, 305), (305, 306), (306, 307), (307, 308), (308, 309), (309, 310), (310, 301), (311, 312), (312, 313), (313, 314), (314, 315), (315, 316), (316, 317), (317, 318), (318, 319), (319, 320), (320, 311), (321, 322), (322, 323), (323, 324), (324, 325), (325, 326), (326, 327), (327, 328), (328, 329), (329, 330), (330, 321), (331, 332), (332, 333), (333, 334), (334, 335), (335, 336), (336, 337), (337, 338), (338, 339), (339, 340), (340, 331), (341, 342), (342, 343), (343, 344), (344, 345), (345, 346), (346, 347), (347, 348), (348, 349), (349, 350), (350, 341), (351, 352), (352, 353), (353, 354), (354, 355), (355, 356), (356, 357), (357, 358), (358, 359), (359, 360), (360, 351), (361, 362), (362, 363), (363, 364), (364, 365), (365, 366), (366, 367), (367, 368), (368, 369), (369, 370), (370, 361), (371, 372), (372, 373), (373, 374), (374, 375), (375, 376), (376, 377), (377, 378), (378, 379), (379, 380), (380, 371), (381, 382), (382, 383), (383, 384), (384, 385), (385, 386), (386, 387), (387, 388), (388, 389), (389, 390), (390, 381), (391, 392), (392, 393), (393, 394), (394, 395), (395, 396), (396, 397), (397, 398), (398, 399), (399, 400), (400, 391), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16), (7, 17), (8, 18), (9, 19), (10, 20), (11, 21), (12, 22), (13, 23), (14, 24), (15, 25), (16, 26), (17, 27), (18, 28), (19, 29), (20, 30), (21, 31), (22, 32), (23, 33), (24, 34), (25, 35), (26, 36), (27, 37), (28, 38), (29, 39), (30, 40), (31, 41), (32, 42), (33, 43), (34, 44), (35, 45), (36, 46), (37, 47), (38, 48), (39, 49), (40, 50), (41, 51), (42, 52), (43, 53), (44, 54), (45, 55), (46, 56), (47, 57), (48, 58), (49, 59), (50, 60), (51, 61), (52, 62), (53, 63), (54, 64), (55, 65), (56, 66), (57, 67), (58, 68), (59, 69), (60, 70), (61, 71), (62, 72), (63, 73), (64, 74), (65, 75), (66, 76), (67, 77), (68, 78), (69, 79), (70, 80), (71, 81), (72, 82), (73, 83), (74, 84), (75, 85), (76, 86), (77, 87), (78, 88), (79, 89), (80, 90), (81, 91), (82, 92), (83, 93), (84, 94), (85, 95), (86, 96), (87, 97), (88, 98), (89, 99), (90, 100), (91, 101), (92, 102), (93, 103), (94, 104), (95, 105), (96, 106), (97, 107), (98, 108), (99, 109), (100, 110), (101, 111), (102, 112), (103, 113), (104, 114), (105, 115), (106, 116), (107, 117), (108, 118), (109, 119), (110, 120), (111, 121), (112, 122), (113, 123), (114, 124), (115, 125), (116, 126), (117, 127), (118, 128), (119, 129), (120, 130), (121, 131), (122, 132), (123, 133), (124, 134), (125, 135), (126, 136), (127, 137), (128, 138), (129, 139), (130, 140), (131, 141), (132, 142), (133, 143), (134, 144), (135, 145), (136, 146), (137, 147), (138, 148), (139, 149), (140, 150), (141, 151), (142, 152), (143, 153), (144, 154), (145, 155), (146, 156), (147, 157), (148, 158), (149, 159), (150, 160), (151, 161), (152, 162), (153, 163), (154, 164), (155, 165), (156, 166), (157, 167), (158, 168), (159, 169), (160, 170), (161, 171), (162, 172), (163, 173), (164, 174), (165, 175), (166, 176), (167, 177), (168, 178), (169, 179), (170, 180), (171, 181), (172, 182), (173, 183), (174, 184), (175, 185), (176, 186), (177, 187), (178, 188), (179, 189), (180, 190), (181, 191), (182, 192), (183, 193), (184, 194), (185, 195), (186, 196), (187, 197), (188, 198), (189, 199), (190, 200), (191, 201), (192, 202), (193, 203), (194, 204), (195, 205), (196, 206), (197, 207), (198, 208), (199, 209), (200, 210), (201, 211), (202, 212), (203, 213), (204, 214), (205, 215), (206, 216), (207, 217), (208, 218), (209, 219), (210, 220), (211, 221), (212, 222), (213, 223), (214, 224), (215, 225), (216, 226), (217, 227), (218, 228), (219, 229), (220, 230), (221, 231), (222, 232), (223, 233), (224, 234), (225, 235), (226, 236), (227, 237), (228, 238), (229, 239), (230, 240), (231, 241), (232, 242), (233, 243), (234, 244), (235, 245), (236, 246), (237, 247), (238, 248), (239, 249), (240, 250), (241, 251), (242, 252), (243, 253), (244, 254), (245, 255), (246, 256), (247, 257), (248, 258), (249, 259), (250, 260), (251, 261), (252, 262), (253, 263), (254, 264), (255, 265), (256, 266), (257, 267), (258, 268), (259, 269), (260, 270), (261, 271), (262, 272), (263, 273), (264, 274), (265, 275), (266, 276), (267, 277), (268, 278), (269, 279), (270, 280), (271, 281), (272, 282), (273, 283), (274, 284), (275, 285), (276, 286), (277, 287), (278, 288), (279, 289), (280, 290), (281, 291), (282, 292), (283, 293), (284, 294), (285, 295), (286, 296), (287, 297), (288, 298), (289, 299), (290, 300), (291, 301), (292, 302), (293, 303), (294, 304), (295, 305), (296, 306), (297, 307), (298, 308), (299, 309), (300, 310), (301, 311), (302, 312), (303, 313), (304, 314), (305, 315), (306, 316), (307, 317), (308, 318), (309, 319), (310, 320), (311, 321), (312, 322), (313, 323), (314, 324), (315, 325), (316, 326), (317, 327), (318, 328), (319, 329), (320, 330), (321, 331), (322, 332), (323, 333), (324, 334), (325, 335), (326, 336), (327, 337), (328, 338), (329, 339), (330, 340), (331, 341), (332, 342), (333, 343), (334, 344), (335, 345), (336, 346), (337, 347), (338, 348), (339, 349), (340, 350), (341, 351), (342, 352), (343, 353), (344, 354), (345, 355), (346, 356), (347, 357), (348, 358), (349, 359), (350, 360), (351, 361), (352, 362), (353, 363), (354, 364), (355, 365), (356, 366), (357, 367), (358, 368), (359, 369), (360, 370), (361, 371), (362, 372), (363, 373), (364, 374), (365, 375), (366, 376), (367, 377), (368, 378), (369, 379), (370, 380), (371, 381), (372, 382), (373, 383), (374, 384), (375, 385), (376, 386), (377, 387), (378, 388), (379, 389), (380, 390), (381, 391), (382, 392), (383, 393), (384, 394), (385, 395), (386, 396), (387, 397), (388, 398), (389, 399), (390, 400)])
    #小规模方格
    G.add_edges_from(
        [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6),  (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (13, 14),
         (14, 15), (15, 16), (16, 17), (17, 18), (19, 20), (20, 11), (21, 22), (22, 23), (23, 24),
         (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36),
         (1,7),(2,8),(3, 9), (4, 10), (5, 11),(6,12),(7, 13), (8, 14), (9, 15), (10, 16), (11, 17),(12,18),(13, 19),
         (14, 20), (15, 21), (16, 22), (17, 23),(18,24),(19, 25), (20, 26), (21, 27), (22, 28), (23, 29),(24,30),(25, 31),
         (26, 32), (27, 33), (28, 34), (29, 35),(30, 36)])
    #小规模放射网
    '''G.add_edges_from(
        [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 1), (11, 12), (12, 13), (13, 14),
         (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 11), (21, 22), (22, 23), (23, 24), (24, 25),
         (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 21), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36),
         (36, 37), (37, 38), (38, 39), (39, 40), (40, 31),(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16), (7, 17), 
         (8, 18), (9, 19), (10, 20), (11, 21), (12, 22), (13, 23), (14, 24), (15, 25), (16, 26), (17, 27), (18, 28),
          (19, 29), (20, 30),(21,31),(22,32),(23,33),(24,34),(25,35),(26,36),(27,37),(28,38),(29,39),(30,40)])'''
    #简单的树状网
    '''G.add_edges_from(
        [(1, 2), (2, 3), (4, 5), (5, 6),  (7, 8), (8, 9),  (10, 11), (11, 12),  (13, 14),
         (14, 15),  (16, 17), (17, 18),  (19, 20), (20,21),(22, 23), (23, 24),
         (25, 26), (26, 27),  (28, 29), (29, 30),  (31, 32), (32, 33),  (34, 35), (35, 36),
         (2,5),(8,11),(14,17),(20,23),(26,29),(32,35),(5,37),(8,37),(17,38),(20,38),(29,39),(32,39),(37,38),(38,39)])'''
                      #G.add_edges_from(read_road("data/road4.txt"))
    nx.draw(G, edge_color="g", with_labels=True, width=1)
    plt.show()
    #G = nx.grid_2d_graph(n, n)
    #G = nx.barabasi_albert_graph(100, 2)  # 生成BA无标度网络
    #G = G.to_directed()  # 转换成有向图。如需无向图，可将该行注释掉
    B = nx.betweenness_centrality(G, endpoints=True)  # 获取所有节点的介数
    #
    # 设置节点的初始负载 L0_n = Bn
    for n in G.nodes():
        B = nx.betweenness_centrality(G, endpoints=True)  # 获取所有节点的介数
        G.add_node(n, L0=B[n]**0.6)

    for n in G.nodes():
        G.add_node(n, C0 = (1.4) * G.nodes[n]['L0'])
    return G

def get_HH(G):
    # 获取负载最高的节点
    for n in G.nodes():
        node = n
        break

    for n in G.nodes():
        if G.nodes[n]['L0'] > G.nodes[node]['L0']:
            node = n
    return node

def remove_node(G,node):
    # 移除该节点，并将负载按容量分配给相邻节点
    nb = [k for k in G.neighbors(node)] # node的相邻节点列表
    C_total_neighbors = sum([G.nodes[k]['C0'] for k in nb]) # 相邻节点的容量总和
    if C_total_neighbors == 0:
        if len(nb) != 0:
            x = G.nodes[node]['L0']/len(nb)
            for k in nb:
                G.nodes[k]['L0'] = x
    else:
        x = (G.nodes[node]['L0']-0.6*G.nodes[node]['C0']) / (C_total_neighbors )
        for k in nb:
            G.nodes[k]['L0'] += G.nodes[k]['C0'] * x    # 将被毁节点的负载，按容量大小比例分配给相邻节点
    G.remove_node(node) # 从网络中移除被摧毁节点

    return nb

def is_ruin(G,nbb):
    # 递归，检查被摧毁节点的邻居是否过载，过载则被毁
    for n in nbb:
        if n in G.nodes():
            if G.nodes[n]['L0'] > G.nodes[n]['C0']:
                nei = remove_node(G,n)   # 过载则被毁
                is_ruin(G,nei)      # 检查被毁节点的邻居

'''def attack(G):
    graph = G.copy()
    steps = 1
    effs = []
    effs.append(global_efficiency(G))
    while len(graph) > 0:
        print("第"+str(steps)+"次删除节点，"+"删除此时的最高负载点"+str(get_HH(graph)))
        nb=remove_node(graph,get_HH(graph))
        is_ruin(graph,nb)
        effs.append(global_efficiency(graph))
        steps+=1

    # 接下来开始画图
    x = []
    for i in range(steps):
        # x.append(str(100*i/len(graph))+"%")
        x.append(i )
    plt.plot(x, effs, color='b')
    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(1))
    # 设置横轴的上下限
    plt.xlim(0, steps)
    plt.show()
    return graph'''
def attack(G):
    graph = G.copy()
    steps = 1
    rps_ed=0
    rps = []
    reserve=[]
    len_edge0=len(G.edges)
    while len(graph.edges()) > 0:
        print("第"+str(steps)+"次删除节点，"+"删除此时的最高负载点"+str(get_HH(graph)))
        nb=remove_node(graph,get_HH(graph))
        is_ruin(graph,nb)
        len_edge=len(graph.edges())
        reserve.append(len_edge)
        print(len_edge0-len_edge)
        rps.append(len_edge0-len_edge-rps_ed)
        rps_ed=len_edge0-len_edge
        steps+=1
    print(rps)
    # 接下来开始画图
    x = []
    for i in range(steps-1):
        # x.append(str(100*i/len(graph))+"%")
        x.append(i+1)
    plt.plot(x, rps, color='b')
    plt.plot(x, reserve, color='r')
    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(1))
    # 设置横轴的上下限
    plt.xlim(0, steps)
    plt.show()
    return graph

def global_efficiency(G):
    n = len(G)
    denom = n * (n - 1)
    if denom != 0:
        lengths = nx.all_pairs_shortest_path_length(G)
        g_eff = 0
        for source, targets in lengths:
            for target, distance in targets.items():
                if distance > 0:
                    g_eff += 1 / distance
        g_eff /= denom
        # g_eff = sum(1 / d for s, tgts in lengths
        #                   for t, d in tgts.items() if d > 0) / denom
    else:
        g_eff = 0
    # TODO This can be made more efficient by computing all pairs shortest
    # path lengths in parallel.
    return g_eff


if __name__ == '__main__':
    G=create(10)
    pos = nx.spring_layout(G, iterations=1000)
    attack(G)
